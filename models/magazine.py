from database.connection import get_db_connection

class Magazine:
    """
    Represents a magazine that contains multiple articles.
    """

    def __init__(self, name, category):
        """
        Initialize a Magazine instance and save it to the database.
        The ID is auto-generated by the database and fetched after saving.

        Args:
            name (str): The name of the magazine. Must be 2-16 characters.
            category (str): The category of the magazine. Must be a non-empty string.

        Raises:
            ValueError: If the name or category does not meet the validation criteria.
        """
        self._name = None  # Temporary placeholder for validation
        self._category = None  # Temporary placeholder for validation
        self.name = name  # Setter validation will be triggered
        self.category = category  # Setter validation will be triggered
        self._id = None  # ID assigned after saving to the database

        # Save the magazine to the database
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("INSERT INTO magazines (name, category) VALUES (?, ?)", (self._name, self._category))
        self._id = cursor.lastrowid  # Fetch the auto-generated ID from the database
        connection.commit()
        connection.close()

    @property
    def id(self):
        """
        Get the ID of the magazine.

        Returns:
            int: The ID of the magazine.
        """
        return self._id

    @property
    def name(self):
        """
        Get the name of the magazine.

        Returns:
            str: The name of the magazine.
        """
        return self._name

    @name.setter
    def name(self, value):
        """
        Set the name of the magazine with validation.

        Args:
            value (str): The new name for the magazine.

        Raises:
            ValueError: If the name is not a string between 2 and 16 characters.
        """
        if not (isinstance(value, str) and 2 <= len(value) <= 16):
            raise ValueError("Name must be a string between 2 and 16 characters.")
        self._name = value

    @property
    def category(self):
        """
        Get the category of the magazine.

        Returns:
            str: The category of the magazine.
        """
        return self._category

    @category.setter
    def category(self, value):
        """
        Set the category of the magazine with validation.

        Args:
            value (str): The new category for the magazine.

        Raises:
            ValueError: If the category is not a non-empty string.
        """
        if not isinstance(value, str) or not value.strip():
            raise ValueError("Category must be a non-empty string.")
        self._category = value

    def articles(self):
        """
        Retrieve all articles associated with this magazine.

        Returns:
            list: A list of Article instances.
        """
        from models.article import Article  # Lazy import to avoid circular dependency
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM articles WHERE magazine_id = ?", (self._id,))
        articles = [Article(row["title"], row["content"], row["author_id"], row["magazine_id"]) for row in cursor.fetchall()]
        connection.close()
        return articles

    def contributors(self):
        """
        Retrieve all authors who have contributed to this magazine.

        Returns:
            list: A list of Author instances.
        """
        from models.author import Author  # Lazy import to avoid circular dependency
        connection = get_db_connection()
        cursor = connection.cursor()
        query = """
        SELECT DISTINCT a.id, a.name FROM authors a
        JOIN articles ar ON a.id = ar.author_id
        WHERE ar.magazine_id = ?
        """
        cursor.execute(query, (self._id,))
        authors = []
        for row in cursor.fetchall():
            author = Author(row["name"])  # Initialize Author with name only
            author._id = row["id"]  # Manually set the ID fetched from the database
            authors.append(author)
        connection.close()
        return authors

    def article_titles(self):
        """
        Retrieve the titles of all articles in this magazine.

        Returns:
            list: A list of article titles as strings.
        """
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT title FROM articles WHERE magazine_id = ?", (self._id,))
        titles = [row["title"] for row in cursor.fetchall()]
        connection.close()
        return titles

    def contributing_authors(self):
        """
        Retrieve authors who have written more than 2 articles for this magazine.

        Returns:
            list: A list of Author instances.
        """
        from models.author import Author  # Lazy import to avoid circular dependency
        connection = get_db_connection()
        cursor = connection.cursor()
        query = """
        SELECT a.id, a.name FROM authors a
        JOIN articles ar ON a.id = ar.author_id
        WHERE ar.magazine_id = ?
        GROUP BY a.id
        HAVING COUNT(ar.id) > 2
        """
        cursor.execute(query, (self._id,))
        authors = []
        for row in cursor.fetchall():
            author = Author(row["name"])  # Initialize Author with name only
            author._id = row["id"]  # Manually set the ID fetched from the database
            authors.append(author)
        connection.close()
        return authors

    def __repr__(self):
        """
        String representation of the Magazine instance.

        Returns:
            str: The name of the magazine.
        """
        return self._name
