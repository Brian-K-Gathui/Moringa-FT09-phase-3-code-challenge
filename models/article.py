from database.connection import get_db_connection

class Article:
    """
    Represents an article written by an author for a magazine.
    """

    def __init__(self, title, content, author_id, magazine_id):
        """
        Initialize an Article instance and save it to the database.
        The ID is auto-generated by the database and fetched after saving.

        Args:
            title (str): The title of the article. Must be 5-50 characters.
            content (str): The content of the article. Can be empty or None.
            author_id (int): The ID of the author who wrote the article.
            magazine_id (int): The ID of the magazine where the article is published.

        Raises:
            ValueError: If the title does not meet the validation criteria.
        """
        self._title = None  # Temporary placeholder for validation
        self.title = title  # Setter validation will be triggered
        self._content = content  # Content does not have strict validation
        self._author_id = author_id
        self._magazine_id = magazine_id
        self._id = None  # ID assigned after saving to the database

        # Save the article to the database
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute(
            "INSERT INTO articles (title, content, author_id, magazine_id) VALUES (?, ?, ?, ?)",
            (self._title, self._content, self._author_id, self._magazine_id),
        )
        self._id = cursor.lastrowid  # Fetch the auto-generated ID from the database
        connection.commit()
        connection.close()

    @property
    def id(self):
        """
        Get the ID of the article.

        Returns:
            int: The ID of the article.
        """
        return self._id

    @property
    def title(self):
        """
        Get the title of the article.

        Returns:
            str: The title of the article.
        """
        return self._title

    @title.setter
    def title(self, value):
        """
        Set the title of the article with validation.

        Args:
            value (str): The new title for the article.

        Raises:
            ValueError: If the title is not a string between 5 and 50 characters.
        """
        if not (isinstance(value, str) and 5 <= len(value) <= 50):
            raise ValueError("Title must be a string between 5 and 50 characters.")
        self._title = value

    @property
    def content(self):
        """
        Get the content of the article.

        Returns:
            str: The content of the article.
        """
        return self._content

    @content.setter
    def content(self, value):
        """
        Set the content of the article.

        Args:
            value (str): The new content for the article. Can be empty or None.
        """
        self._content = value

    @property
    def author_id(self):
        """
        Get the ID of the author who wrote the article.

        Returns:
            int: The ID of the author.
        """
        return self._author_id

    @property
    def magazine_id(self):
        """
        Get the ID of the magazine where the article is published.

        Returns:
            int: The ID of the magazine.
        """
        return self._magazine_id

    def __repr__(self):
        """
        String representation of the Article instance.

        Returns:
            str: The title of the article.
        """
        return self._title
