from database.connection import get_db_connection

class Author:
    """
    Represents an author in the system who can write multiple articles.
    """

    def __init__(self, name):
        """
        Initialize an Author instance and save it to the database.
        The ID is auto-generated by the database and fetched after saving.

        Args:
            name (str): The name of the author. Must be a non-empty string.

        Raises:
            ValueError: If the name does not meet the validation criteria.
        """
        self._name = None  # Temporary placeholder for validation
        self.name = name  # Setter validation will be triggered
        self._id = None  # ID assigned after saving to the database

        # Save the author to the database
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("INSERT INTO authors (name) VALUES (?)", (self._name,))
        self._id = cursor.lastrowid  # Fetch the auto-generated ID
        connection.commit()
        connection.close()

    @property
    def id(self):
        """
        Get the ID of the author.

        Returns:
            int: The ID of the author.
        """
        return self._id

    @property
    def name(self):
        """
        Get the name of the author.

        Returns:
            str: The name of the author.
        """
        return self._name

    @name.setter
    def name(self, value):
        """
        Set the name of the author with validation.

        Args:
            value (str): The new name for the author.

        Raises:
            ValueError: If the name is not a non-empty string.
        """
        if not isinstance(value, str) or not value.strip():
            raise ValueError("Name must be a non-empty string.")
        self._name = value

    def articles(self):
        """
        Retrieve all articles written by this author.

        Returns:
            list: A list of Article instances.
        """
        from models.article import Article  # Lazy import to avoid circular dependency
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM articles WHERE author_id = ?", (self._id,))
        articles = [Article(row["id"], row["title"], row["content"], row["author_id"], row["magazine_id"]) for row in cursor.fetchall()]
        connection.close()
        return articles

    def magazines(self):
        """
        Retrieve all magazines associated with this author.

        Returns:
            list: A list of Magazine instances.
        """
        from models.magazine import Magazine  # Lazy import to avoid circular dependency
        connection = get_db_connection()
        cursor = connection.cursor()
        query = """
        SELECT DISTINCT m.* FROM magazines m
        JOIN articles a ON m.id = a.magazine_id
        WHERE a.author_id = ?
        """
        cursor.execute(query, (self._id,))
        magazines = [Magazine(row["id"], row["name"], row["category"]) for row in cursor.fetchall()]
        connection.close()
        return magazines

    def __repr__(self):
        """
        String representation of the Author instance.

        Returns:
            str: The name of the author.
        """
        return self._name
